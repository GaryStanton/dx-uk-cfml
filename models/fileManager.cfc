/**
 * Name: DX UK file manager
 * Author: Gary Stanton (@SimianE)
 * Description: Handles the processing of files generated by DX UK.
 */
component singleton accessors="true" {
	property name="resultsfilePath" type="string";
	property name="localFilePath" 	type="string" default="#GetDirectoryFromPath(GetCurrentTemplatePath())#../store/";

	/**
	 * Constructor
	 * 
	 * @resultsfilePath The filesystem location containing the DX UK exported files
	 * @localfilePath  	The filesystem location to use when processing files. Defaults to /store.
	 */
	public fileManager function init(
			required string resultsfilePath
		,   string filePath
	){  
		setResultsFilePath(Arguments.resultsfilePath);
		// Create file store
		if (!directoryExists(getLocalFilePath())) {
			DirectoryCreate(getLocalFilePath());
		}

		return this;
	}

	/**
	 * Returns a query object of results files
	 */
	public function getFileList() {
		try {
			return directoryList(getResultsFilePath(), false, 'query');
		}
		catch(any e) {
			return 'Unable to retrieve files';
		}
	}


	/**
	 * Filter a file list query object by name and/or date
	 * @fileNames 	Optionally provide a specific filename or list of filenames
	 * @dateRange	Optionally provide a comma separated (inclusive) date range (yyyy-mm-dd,yyyy-mm-dd) to filter files. Where a single date is passed, all files from that date will be included.
	 * @fileList 	Optionally provide an existing file list from which to filter results. Defaults to using the contents of the results folder.
	 *
	 * @return     	Query object containing tracking event data
	 */
	public function filterFileList(
			string fileNames
		,	string dateRange
		,	query fileList
		,	numeric maxFiles = 0
	) {
		
		var fileList = StructKeyExists(Arguments, 'fileList') ? Arguments.fileList : getFileList();

		if (isQuery(fileList)) {
			// Filter query
			Local.SQL = "
				SELECT *
				FROM fileList
				WHERE 1 = 1
			";

			Local.Params = {};

			if (structKeyExists(Arguments, 'fileNames')) {
				Local.SQL &= "
					AND 	name IN (:filenames)
				";

				Local.Params.filenames = {value = Arguments.fileNames, list = true};
			}

			if (structKeyExists(Arguments, 'dateRange')) {
				Local.SQL &= "
					AND 	dateLastModified >= :DateFrom
				";

				Local.Params.DateFrom = {value = DateFormat(ListFirst(Arguments.dateRange), 'yyyy-mm-dd')};
			}

			if (structKeyExists(Arguments, 'dateRange') && listLen(Arguments.DateRange) == 2) {
				Local.SQL &= "
					AND 	dateLastModified < :DateTo
				";

				Local.Params.DateTo = {value = DateAdd('d', 1, DateFormat(ListLast(Arguments.dateRange), 'yyyy-mm-dd'))};
			}

			Local.SQL &= 'ORDER BY dateLastModified ASC'

			fileList = queryExecute(Local.SQL, Local.params , {dbtype="query", maxrows=Arguments.MaxFiles > 0 ? Arguments.MaxFiles : 9999999});
		}

		return fileList;
	}

	public function processFiles(
			string fileNames
		,	string dateRange
		,	boolean deleteFiles = false
		,	numeric maxFiles = 0
	) {
		Local.fileList = filterFileList(
			ArgumentCollection 	= Arguments
		);

		// Array to store local filenames
		Local.localFiles = [];

		// Loop through the files and copy to local storage
		for (Local.thisFile in Local.fileList) {
			try {
				if (Arguments.deleteFiles) {
					fileMove(Local.thisFile.directory & '/' & Local.thisFile.name, getLocalFilePath() & '/' & Local.thisFile.name);
				}
				else {
					fileCopy(Local.thisFile.directory & '/' & Local.thisFile.name, getLocalFilePath() & '/' & Local.thisFile.name);
				}

				Local.localFiles.append(Local.thisFile.name);
			}
			catch(any e) {

			}
		}

		// Process local files
		if (Local.localFiles.len()) {
			Local.queryObject = processLocalFiles(arrayToList(Local.LocalFiles))
			return Local.queryObject;
		}
		else {
			return 'No matching files found.';
		}
	}


	public function processLocalFiles(
			string fileNames
		,	string dateRange
		,	numeric maxFiles = 0
	) {
		// Get file query object
		Local.fileList = filterFileList(
				fileList 			= directoryList(getLocalFilePath(), false, 'query')
			,	ArgumentCollection 	= Arguments
		);

		Local.conversion = new conversion();

		for (Local.thisFile in Local.fileList) {
			// Read data
			Local.rawData = fileRead(getLocalFilePath() & Local.thisFile.name);

			// Process data
			Local.data = Local.conversion.CSVToQuery(
					CSV 		= Local.rawData
				, 	Delimiter 	= '|'
				,	headerRow 	= false
			);

			if (!StructKeyExists(Local, 'queryObject')) {
				Local.queryObject = queryNew('orderRef,trackingno,filename');
			}

			// Add rows
			for (Local.thisRow in Local.data) {
				if (Local.thisRow.COLUMN_1.len()) {
					Local.queryObject.addRow({
							"orderRef" = Local.thisRow.COLUMN_1
						, 	"trackingno" = Local.thisRow.COLUMN_2
						, 	"filename" = Local.thisFile.name
					});
				}
			}
		}

		return Local.queryObject;
	}
}